🎯𝙇𝙀𝙀𝙏𝘾𝙊𝘿𝙀 𝙎𝙌𝙇 𝘿𝘼𝙏𝘼𝘽𝘼𝙎𝙀 45 𝙌𝙐𝙀𝙎𝙏𝙄𝙊𝙉𝙎 𝘾𝙃𝘼𝙇𝙇𝙀𝙉𝙂𝙀 

Problem of the Day: 🚀FIX NAMES IN A TABLE
I tackled an interesting problem on LeetCode: Fix Names in a Table.
Here's a brief overview of how I approached solving it.

🌟𝗣𝗿𝗼𝗯𝗹𝗲𝗺 𝗦𝘁𝗮𝘁𝗲𝗺𝗲𝗻𝘁:

Difficulty Level:Easy
❓ Problem link : https://leetcode.com/problems/fix-names-in-a-table/description/?envType=problem-list-v2&envId=e97a9e5m

🌟𝗧𝗵𝗲 𝗖𝗵𝗮𝗹𝗹𝗲𝗻𝗴𝗲:
The main difficulty is correcting inconsistent capitalization in the name field of the Users table. Names may be entered with arbitrary capitalization, so the task is to ensure that only the first letter of each name is uppercase while the remaining letters are lowercase.

🌟𝗜𝗻𝗶𝘁𝗶𝗮𝗹 𝗧𝗵𝗼𝘂𝗴𝗵𝘁𝘀:
When first approaching this problem, I recognized that string manipulation functions would be required. Specifically, it is necessary to separate the first letter from the rest of the name and apply different transformations to each part. My initial thought was to use SQL functions like UPPER() to capitalize the first character and LOWER() to convert the rest of the string to lowercase.

🌟𝗢𝗽𝘁𝗶𝗺𝗶𝘇𝗮𝘁𝗶𝗼𝗻 𝗦𝘁𝗿𝗮𝘁𝗲𝗴𝘆:
To make the solution efficient and readable, I focused on using SQL functions that target specific parts of the string:
String manipulation: By using SUBSTRING(), LEFT(), and RIGHT(), I can easily separate the first character from the rest of the string.
Capitalization: The first letter is converted to uppercase using UPPER(), and the rest of the name is converted to lowercase with LOWER().
Concatenation: The CONCAT() function is used to join the uppercase first letter with the rest of the lowercase string.

Looking forward to sharing more soon!💛
👉 Feel free to explore my Leetcode here:https://lnkd.in/e4JAGU97
📌 Leetcode SQL Database 45 ques challenge:https://lnkd.in/eBAN_Psk

  
Problem :Fix Names in a Table

1667

METHOD 1: CONCAT(), UPPER(), AND LOWER()

SELECT
  user_id,
  CONCAT(
    UPPER(SUBSTRING(name, 1, 1)),
    LOWER(SUBSTRING(name, 2))
  ) AS name
FROM Users
ORDER BY 1;

Explanation:
•	SUBSTRING(name, 1, 1):This extracts the first character from the name field.
•	UPPER(SUBSTRING(name, 1, 1)):Converts the extracted first character to uppercase.
•	SUBSTRING(name, 2):This extracts the rest of the string starting from the second character
•	LOWER(SUBSTRING(name, 2)):Converts the rest of the string to lowercase.
•	CONCAT(UPPER(SUBSTRING(...)), LOWER(SUBSTRING(...))):Combines the uppercase first letter and the lowercase remainder of the name.
•	ORDER BY 1:Orders the results by the first column, which is user_id.










1667

METHOD 2: LEFT() AND RIGHT()

SELECT 
    user_id, 
    CONCAT(UPPER(LEFT(name, 1)), LOWER(RIGHT(name, LENGTH(name) - 1))) AS name
FROM 
    Users
ORDER BY 
    user_id;


Explanation:
•	This query is another solution to correct the capitalization of the names in the Users table, ensuring that only the first letter is uppercase and the rest are lowercase.
•	LEFT(name, 1):Extracts the first character of the name.
•	UPPER(LEFT(name, 1)):Converts the extracted first character to uppercase.
•	LENGTH(name) - 1:Calculates the length of the name minus 1, which gives the number of characters after the first one.
•	RIGHT(name, LENGTH(name) - 1):Extracts the rest of the string, i.e., all characters except the first one.
•	LOWER(RIGHT(name, LENGTH(name) - 1)):Converts the remaining characters to lowercase.
•	CONCAT(UPPER(LEFT(...)), LOWER(RIGHT(...))):Combines the uppercase first letter and the lowercase remainder of the name.
•	ORDER BY user_id:Orders the result by user_id in ascending order.
•	This query handles both short and long names and ensures that any capitalization inconsistencies are corrected efficiently.
 


1667

METHOD 3 : USING STORED PROCEDURE


DELIMITER //
CREATE PROCEDURE FixNames()
BEGIN
    UPDATE Users
    SET name = CONCAT(UPPER(SUBSTRING(name, 1, 1)), LOWER(SUBSTRING(name, 2)));
END //
DELIMITER ;
CALL FixNames();


Explanation:
•	This solution uses a stored procedure in MySQL to fix the capitalization of names in the Users table, ensuring that only the first letter is uppercase and the rest are lowercase.
•	DELIMITER //:Changes the delimiter from the default semicolon (;) to // so that you can use semicolons inside the procedure without terminating it prematurely.
•	CREATE PROCEDURE FixNames():Defines a stored procedure called FixNames().
•	BEGIN ... END:Marks the beginning and end of the procedure body.
•	UPDATE Users SET name = CONCAT(UPPER(SUBSTRING(name, 1, 1)), LOWER(SUBSTRING(name, 2)));:This SQL statement updates the name column in the Users table. It does the following:
•	SUBSTRING(name, 1, 1): Extracts the first character of the name.
•	UPPER(SUBSTRING(name, 1, 1)): Converts the first character to uppercase.
•	SUBSTRING(name, 2): Extracts the rest of the string (from the second character onward).
•	LOWER(SUBSTRING(name, 2)): Converts the rest of the string to lowercase.
•	CONCAT(...): Combines the uppercase first letter with the lowercase remainder of the name.
•	DELIMITER ;:Resets the delimiter back to semicolon (;).
•	CALL FixNames();:Calls the stored procedure FixNames() to execute the UPDATE query and fix all the names in the Users table.
•	Once the stored procedure is executed, all the names in the Users table will be updated so that only the first character is uppercase and the rest are lowercase.
